name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test and Lint
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: ai_ui_generator_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        cache: true

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json

    - name: Install Go dependencies
      run: go mod download

    - name: Install Node.js dependencies
      working-directory: ./web
      run: npm ci

    - name: Run Go linting
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: .

    - name: Run Go tests
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: ai_ui_generator_test
        DB_USER: postgres
        DB_PASSWORD: password
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Run Go security scan
      uses: securego/gosec@master
      with:
        args: './...'

    - name: Run Frontend linting
      working-directory: ./web
      run: |
        npm run lint
        npm run type-check

    - name: Run Frontend tests
      working-directory: ./web
      run: npm test --if-present

    - name: Build Frontend
      working-directory: ./web
      run: npm run build

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: backend

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build Docker Images
  build:
    name: Build Images
    runs-on: ubuntu-latest
    needs: [test, security]
    
    strategy:
      matrix:
        service: [api-gateway, auth-service, user-service, ai-service, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service == 'frontend' && './web' || '.' }}
        dockerfile: ${{ matrix.service == 'frontend' && './web/Dockerfile' || format('./cmd/{0}/Dockerfile', matrix.service) }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create test environment
      run: |
        cp .env.example .env
        docker-compose -f docker-compose.yml up -d postgres redis
        
    - name: Wait for services
      run: |
        timeout 60 bash -c 'until docker-compose -f docker-compose.yml exec -T postgres pg_isready -U postgres; do sleep 2; done'
        timeout 60 bash -c 'until docker-compose -f docker-compose.yml exec -T redis redis-cli ping; do sleep 2; done'

    - name: Run database migrations
      run: |
        # Run migrations here when available
        echo "Database migrations would run here"

    - name: Run integration tests
      run: |
        # Run integration tests against the running services
        echo "Integration tests would run here"

    - name: Cleanup
      if: always()
      run: docker-compose -f docker-compose.yml down -v

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, integration]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deployment to staging would happen here"
        # Example: kubectl apply -f k8s/staging/
        # Or: docker-compose -f docker-compose.staging.yml up -d

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, integration]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deployment to production would happen here"
        # Example: kubectl apply -f k8s/production/
        # Or: docker-compose -f docker-compose.prod.yml up -d

  # Release
  # release:
  #   name: Create Release
  #   runs-on: ubuntu-latest
  #   needs: [deploy-production]
  #   if: startsWith(github.ref, 'refs/tags/v')
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #     with:
  #       fetch-depth: 0

  #   - name: Generate changelog
  #     id: changelog
  #     run: |
  #       # Generate changelog between tags
  #       PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
  #       if [ -n "$PREVIOUS_TAG" ]; then
  #         CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD)
  #       else
  #         CHANGELOG=$(git log --pretty=format:"- %s")
  #       fi
  #       echo "changelog<<EOF" >> $GITHUB_OUTPUT
  #       echo "$CHANGELOG" >> $GITHUB_OUTPUT
  #       echo "EOF" >> $GITHUB_OUTPUT

  #   - name: Create Release
  #     uses: actions/create-release@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       tag_name: ${{ github.ref_name }}
  #       release_name: Release ${{ github.ref_name }}
  #       body: |
  #         ## What's Changed
          
  #         ${{ steps.changelog.outputs.changelog }}
          
  #         ## Docker Images
          
  #         - `ghcr.io/${{ github.repository }}-api-gateway:${{ github.ref_name }}`
  #         - `ghcr.io/${{ github.repository }}-auth-service:${{ github.ref_name }}`
  #         - `ghcr.io/${{ github.repository }}-user-service:${{ github.ref_name }}`
  #         - `ghcr.io/${{ github.repository }}-ai-service:${{ github.ref_name }}`
  #         - `ghcr.io/${{ github.repository }}-frontend:${{ github.ref_name }}`
  #       draft: false
  #       prerelease: false
