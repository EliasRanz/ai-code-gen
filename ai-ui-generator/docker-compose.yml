version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-ui-generator-postgres
    environment:
      POSTGRES_DB: ai_ui_generator
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ai_ui_generator"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - ai-ui-generator

  # Cache
  redis:
    image: redis:7-alpine
    container_name: ai-ui-generator-redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    restart: unless-stopped
    networks:
      - ai-ui-generator

  # vLLM Server (AI Model)
  vllm:
    image: vllm/vllm-openai:latest
    container_name: ai-ui-generator-vllm
    ports:
      - "8000:8000"
    environment:
      - MODEL_NAME=microsoft/DialoGPT-medium
      - MAX_MODEL_LEN=2048
      - GPU_MEMORY_UTILIZATION=0.8
    # Uncomment if you have GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]
    volumes:
      - vllm_models:/root/.cache/huggingface
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - ai-ui-generator

  # Backend Services
  auth-service:
    build:
      context: .
      dockerfile: cmd/auth-service/Dockerfile
    container_name: ai-ui-generator-auth
    ports:
      - "8081:8081"
    environment:
      - PORT=8081
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=ai_ui_generator
      - DB_USER=postgres
      - DB_PASSWORD=password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_EXPIRY=24h
      - REFRESH_TOKEN_EXPIRY=168h
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/auth-service", "health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - ai-ui-generator

  user-service:
    build:
      context: .
      dockerfile: cmd/user-service/Dockerfile
    container_name: ai-ui-generator-user
    ports:
      - "8082:8082"
    environment:
      - PORT=8082
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=ai_ui_generator
      - DB_USER=postgres
      - DB_PASSWORD=password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/user-service", "health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - ai-ui-generator

  ai-service:
    build:
      context: .
      dockerfile: cmd/ai-service/Dockerfile
    container_name: ai-ui-generator-ai
    ports:
      - "8083:8083"
    environment:
      - PORT=8083
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=ai_ui_generator
      - DB_USER=postgres
      - DB_PASSWORD=password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - VLLM_URL=http://vllm:8000
      - LLM_MODEL=microsoft/DialoGPT-medium
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      vllm:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/ai-service", "health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - ai-ui-generator

  api-gateway:
    build:
      context: .
      dockerfile: cmd/api-gateway/Dockerfile
    container_name: ai-ui-generator-gateway
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - AUTH_SERVICE_URL=http://auth-service:8081
      - USER_SERVICE_URL=http://user-service:8082
      - AI_SERVICE_URL=http://ai-service:8083
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://frontend:3000
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_WINDOW=60s
    depends_on:
      auth-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
      ai-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/api-gateway", "health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - ai-ui-generator

  # Frontend
  frontend:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: ai-ui-generator-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=your-super-secret-nextauth-key-change-in-production
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NEXT_PUBLIC_WS_URL=ws://localhost:8080
    depends_on:
      api-gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s
    restart: unless-stopped
    networks:
      - ai-ui-generator

  # Database Administration
  adminer:
    image: adminer:4.8.1
    container_name: ai-ui-generator-adminer
    ports:
      - "8090:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - ai-ui-generator

  # Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-ui-generator-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployments/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - ai-ui-generator

  grafana:
    image: grafana/grafana:latest
    container_name: ai-ui-generator-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployments/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - ai-ui-generator

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  vllm_models:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ai-ui-generator:
    driver: bridge
    name: ai-ui-generator-network
